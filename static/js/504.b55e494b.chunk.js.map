{"version":3,"file":"static/js/504.b55e494b.chunk.js","mappings":"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","sources":["components/NewColumn/index.ts","components/NewColumn/NewColumn.tsx","components/FormNewTask/index.ts","components/FormNewTask/FormNewTask.tsx","components/TaskFull/TaskFull.tsx","components/TaskFull/index.ts","components/Task/index.ts","components/Task/Task.tsx","components/Column/Column.tsx","components/Column/index.ts","components/Toolbar/index.ts","components/Toolbar/Toolbar.tsx","components/pages/SingleBoardPage.tsx"],"sourcesContent":["import NewColumn from './NewColumn';\n\nexport default NewColumn;\n","import { Box, Button, DialogActions, DialogContent, DialogTitle, TextField } from '@mui/material';\nimport { useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux.hooks';\nimport { useTranslation } from 'react-i18next';\nimport { createColumn } from '../../store/slices/columnReducer';\n\ntype formData = {\n  title: string;\n};\n\nconst NewColumn = ({ onClose }: { onClose: () => void }) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<formData>();\n\n  const { t } = useTranslation();\n  const { columns } = useAppSelector((state) => state.boards.singleBoard);\n  const dispatch = useAppDispatch();\n  const { boardId } = useParams();\n\n  const onSubmit = ({ title }: formData) => {\n    if (boardId) {\n      dispatch(createColumn({ boardId: boardId, title, order: columns.length }));\n    }\n    onClose();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Box sx={{ width: '100%', maxWidth: '400px' }}>\n        <DialogTitle>{t('COLUMN.CREATE_COLUMN_HEADER')}</DialogTitle>\n        <DialogContent>\n          <TextField\n            label={t('TITLE')}\n            fullWidth={true}\n            sx={{ mt: 2 }}\n            variant=\"outlined\"\n            error={errors.title ? true : false}\n            helperText={errors.title ? errors.title.message : ''}\n            {...register('title', {\n              required: { value: true, message: `${t('FORM.REQUIRE_MSG')}` },\n            })}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} sx={{ '&:hover': { color: 'primary.contrastText' } }}>\n            {t('CANCEL_BTN')}\n          </Button>\n          <Button type=\"submit\" sx={{ '&:hover': { color: 'primary.contrastText' } }}>\n            {t('COLUMN.CREATE_COLUMN_BTN')}\n          </Button>\n        </DialogActions>\n      </Box>\n    </form>\n  );\n};\n\nexport default NewColumn;\n","import FormNewTask from './FormNewTask';\n\nexport default FormNewTask;\n","import { useParams } from 'react-router-dom';\nimport { Button, DialogActions, DialogContent, DialogTitle, TextField } from '@mui/material';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux.hooks';\nimport { localStorageGetUser } from '../../utils/localStorage';\nimport { useForm } from 'react-hook-form';\n// import { useAppSelector } from '../../hooks/redux.hooks';\nimport { useTranslation } from 'react-i18next';\nimport { createTask } from '../../store/slices/taskResucer';\nimport { ITaskResponse } from '../../types/board';\n\ntype IFormInputNewTask = {\n  title: string;\n  description: string;\n};\n\nconst FormNewTask = ({\n  columnId,\n  onClose,\n}: // dataTasks,\n// setDataTasks,\n{\n  columnId: string;\n  onClose: () => void;\n  // dataTasks: ITaskResp[];\n  // setDataTasks: React.Dispatch<React.SetStateAction<ITaskResp[]>>;\n}) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IFormInputNewTask>();\n  const { t } = useTranslation();\n  const dispatch = useAppDispatch();\n  const { boardId } = useParams();\n  // const { id } = useAppSelector((state) => state.auth);\n  const { singleBoard } = useAppSelector((state) => state.boards);\n\n  const onSubmit = (data: IFormInputNewTask) => {\n    const currentColumn = singleBoard?.columns?.find((item) => item.id === columnId);\n    const maxOrder = currentColumn?.tasks?.length || 0;\n    const userId = localStorageGetUser().id;\n    if (boardId) {\n      const newTask: ITaskResponse = {\n        id: '',\n        title: data.title,\n        order: maxOrder,\n        description: data.description,\n        userId: userId,\n        boardId: boardId,\n        columnId: columnId,\n      };\n      dispatch(createTask(newTask));\n    }\n\n    onClose();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <DialogTitle>{t('TASK.CREATE_TASK_HEADER')}</DialogTitle>\n      <DialogContent>\n        <TextField\n          label={t('TITLE')}\n          fullWidth={true}\n          variant=\"outlined\"\n          error={errors.title ? true : false}\n          helperText={errors.title ? errors.title.message : ''}\n          sx={{ my: 3 }}\n          {...register('title', {\n            required: { value: true, message: `${t('FORM.REQUIRE_MSG')}` },\n          })}\n        />\n        <TextField\n          label={t('DESCR')}\n          fullWidth={true}\n          multiline={true}\n          rows={4}\n          variant=\"outlined\"\n          error={errors.description ? true : false}\n          helperText={errors.description ? errors.description.message : ''}\n          {...register('description', {\n            required: { value: true, message: `${t('FORM.REQUIRE_MSG')}` },\n          })}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} sx={{ '&:hover': { color: 'primary.contrastText' } }}>\n          {t('CANCEL_BTN')}\n        </Button>\n        <Button type=\"submit\" sx={{ '&:hover': { color: 'primary.contrastText' } }}>\n          {t('TASK.CREATE')}\n        </Button>\n      </DialogActions>\n    </form>\n  );\n};\n\nexport default FormNewTask;\n","import {\n  Box,\n  Button,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@mui/material';\nimport { IFileAttached, ITask } from '../../types/board';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ConformModal from '../ConformModal';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux.hooks';\nimport { deleteTask, updateTask } from '../../store/slices/taskResucer';\nimport { localStorageGetUser } from '../../utils/localStorage';\nimport { useTranslation } from 'react-i18next';\ntype IFormTaskData = {\n  title: string;\n  description: string;\n  done: boolean;\n  files: IFileAttached;\n};\n\ntype IFormInputFile = {\n  file?: File;\n  filename: string;\n  fileSize: number;\n};\n\ntype IPropsTaskFull = {\n  onClose: () => void;\n  task: ITask;\n};\n\nconst TaskFull = ({ onClose, task }: IPropsTaskFull) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IFormTaskData>();\n  const dispatch = useAppDispatch();\n\n  const [downloadFiles, setDownloadFiles] = React.useState<IFileAttached[]>(task.files || []);\n  const [isOpenConformModal, setIsOpenConformModal] = React.useState(false);\n  const { id, columns } = useAppSelector((state) => state.boards.singleBoard);\n  const { t } = useTranslation();\n  const { usersAll } = useAppSelector((state) => state.boards);\n\n  const currentUser =\n    usersAll?.find((user) => user.id === task.userId)?.name || `${t('FILTER.UNKNOWN_USER')}`;\n\n  const onSubmit = (data: IFormTaskData) => {\n    const userId = localStorageGetUser()?.id;\n    const indexColumns = columns.findIndex((item) => item.tasks?.find((t) => t.id === task.id));\n\n    const newTask = {\n      id: task.id,\n      order: task.order,\n      title: data.title,\n      description: data.description,\n      userId: userId,\n      boardId: id,\n      columnId: columns[indexColumns].id || '',\n    };\n\n    dispatch(updateTask({ newTask, indexColumns }));\n    onClose();\n  };\n\n  const onDelete = async () => {\n    const indexColumns = columns.findIndex((item) => item.tasks?.find((t) => t.id === task.id));\n\n    const data = {\n      tasks: columns[indexColumns]?.tasks || [],\n      boardId: id,\n      taskId: task.id,\n      columnId: columns[indexColumns].id || '',\n      indexColumns: indexColumns || 0,\n    };\n\n    dispatch(deleteTask(data));\n    onClose();\n  };\n\n  const handleDeleteFile = (name: string) => {\n    const newDownloadFiles = downloadFiles.filter((item) => item.filename !== name);\n    setDownloadFiles(newDownloadFiles);\n  };\n\n  const handleUploadFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { files } = e.target;\n    if (files) {\n      const newFile: IFormInputFile = {\n        file: files[0],\n        filename: files[0].name,\n        fileSize: files[0].size,\n      };\n      setDownloadFiles([...downloadFiles, newFile]);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Box sx={{ width: '100%', maxWidth: '500px' }}>\n        <DialogTitle\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            '@media only screen and (max-width: 450px)': {\n              flexDirection: 'column',\n            },\n          }}\n        >\n          {t('TASK.EDIT')}\n          <Typography\n            variant=\"body1\"\n            sx={{\n              m: 0,\n              px: 1,\n            }}\n          >\n            {t('TASK.CREATE_BY')} <span style={{ color: 'blue' }}>{currentUser}</span>\n          </Typography>\n        </DialogTitle>\n\n        <DialogContent sx={{ pb: 0 }}>\n          <TextField\n            autoFocus\n            defaultValue={task.title}\n            margin=\"dense\"\n            id=\"title\"\n            label={t('TITLE')}\n            type=\"text\"\n            fullWidth\n            variant=\"outlined\"\n            error={Boolean(errors.title)}\n            helperText={errors.title ? errors.title.message : ''}\n            {...register('title', {\n              required: { value: true, message: `${t('FORM.REQUIRE_MSG')}` },\n            })}\n          />\n          <TextField\n            defaultValue={task.description}\n            margin=\"dense\"\n            id=\"description\"\n            label={t('DESCR')}\n            type=\"text\"\n            fullWidth\n            variant=\"outlined\"\n            multiline={true}\n            rows={4}\n            error={Boolean(errors.description)}\n            helperText={errors.description ? errors.description.message : ''}\n            {...register('description', {\n              required: { value: true, message: `${t('FORM.REQUIRE_MSG')}` },\n            })}\n          />\n          {downloadFiles.length > 0 && (\n            <TableContainer component={Paper}>\n              <Table size=\"small\" aria-label=\"a dense table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>{t('TASK.FILENAME')}</TableCell>\n                    <TableCell align=\"right\">{t('TASK.SIZE')}</TableCell>\n                    <TableCell align=\"right\"></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {downloadFiles.map((item) => (\n                    <TableRow\n                      key={item.filename}\n                      sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                      <TableCell component=\"th\" scope=\"row\">\n                        {item.filename}\n                      </TableCell>\n                      <TableCell align=\"right\">{item.fileSize}</TableCell>\n                      <TableCell align=\"right\">\n                        {\n                          <Tooltip title=\"Delete file\">\n                            <IconButton\n                              aria-label=\"delete file\"\n                              color=\"primary\"\n                              size=\"large\"\n                              sx={{\n                                p: 0,\n                              }}\n                              onClick={() => handleDeleteFile(item.filename)}\n                            >\n                              <DeleteIcon />\n                            </IconButton>\n                          </Tooltip>\n                        }\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n          <Divider />\n          <Button variant=\"outlined\" component=\"label\" sx={{ mt: 1 }}>\n            {t('TASK.ADD_FILE')}\n            <input\n              type=\"file\"\n              hidden\n              {...register('files', { required: false })}\n              onChange={handleUploadFile}\n            />\n          </Button>\n        </DialogContent>\n        <DialogActions\n          sx={{\n            '@media only screen and (max-width: 450px)': {\n              display: 'flex',\n              flexDirection: 'column',\n            },\n          }}\n        >\n          <Button onClick={() => setIsOpenConformModal(true)} sx={{ color: 'red' }}>\n            {t('TASK.DELETE')}\n          </Button>\n          <Button onClick={onClose} sx={{ '&:hover': { color: 'primary.contrastText' } }}>\n            {t('CANCEL_BTN')}\n          </Button>\n          <Button type=\"submit\" sx={{ '&:hover': { color: 'primary.contrastText' } }}>\n            {t('UPDATE_BTN')}\n          </Button>\n        </DialogActions>\n        <ConformModal\n          isOpen={isOpenConformModal}\n          close={() => setIsOpenConformModal(false)}\n          func={onDelete}\n        />\n      </Box>\n    </form>\n  );\n};\n\nexport default TaskFull;\n","import TaskFull from './TaskFull';\n\nexport default TaskFull;\n","import Task from './Task';\nexport default Task;\n","import { Avatar, ListItem, Paper, styled, Typography } from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport ModalWindow from '../ModalWindow';\nimport TaskFull from '../TaskFull';\nimport React from 'react';\nimport { ITask } from '../../types/board';\nimport { useAppSelector } from '../../hooks/redux.hooks';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Task = ({ task, index }: { task: ITask; index: number }) => {\n  const [isOpenModalTaskFull, setIsOpenModalTaskFull] = React.useState(false);\n  const { usersAll } = useAppSelector((state) => state.boards);\n\n  const currentUser = usersAll?.find((user) => user.id === task.userId)?.name || '';\n\n  const TitleTask = styled(Paper)(({ theme }) => ({\n    ...theme.typography.h6,\n    textAlign: 'left',\n    paddingLeft: theme.spacing(2),\n    color: theme.palette.text.primary,\n    height: 60,\n    width: '100%',\n    overflow: 'auto',\n    lineHeight: '60px',\n    borderRadius: theme.shape.borderRadius,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingRight: '0.6rem',\n    marginBottom: theme.spacing(1),\n    marginTop: theme.spacing(1),\n    '&:hover': {\n      boxShadow: '3px 3px 5px #5a5050',\n      '& .MuiSvgIcon-root': {\n        opacity: '1',\n      },\n    },\n  }));\n\n  function stringToColor(string: string) {\n    let hash = 0;\n    let i;\n\n    for (i = 0; i < string.length; i += 1) {\n      hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    let color = '#';\n\n    for (i = 0; i < 3; i += 1) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += `00${value.toString(16)}`.slice(-2);\n    }\n\n    return color;\n  }\n\n  function stringAvatar(name: string) {\n    const curName = name ? name : 'd';\n    return {\n      sx: {\n        bgcolor: stringToColor(curName),\n      },\n      children: `${\n        curName.split(' ').length > 1\n          ? curName.split(' ')[0][0] + curName.split(' ')[1][0]\n          : curName[0]\n      }`,\n    };\n  }\n\n  return (\n    <>\n      <Draggable draggableId={task.id} index={index}>\n        {(provided) => (\n          <ListItem\n            sx={{\n              width: '100%',\n              m: 0,\n              p: 0,\n            }}\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n          >\n            <TitleTask onClick={() => setIsOpenModalTaskFull(true)} sx={{ gap: 1 }}>\n              <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\n                {task.title}\n              </Typography>\n              <EditIcon\n                sx={{\n                  opacity: '0',\n                }}\n              />\n              <Avatar {...stringAvatar(currentUser)} />\n            </TitleTask>\n          </ListItem>\n        )}\n      </Draggable>\n      <ModalWindow open={isOpenModalTaskFull} onClose={() => setIsOpenModalTaskFull(false)}>\n        <TaskFull onClose={() => setIsOpenModalTaskFull(false)} task={task} />\n      </ModalWindow>\n    </>\n  );\n};\n\nexport default Task;\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Box, Divider, IconButton, Stack, TextField, Tooltip, Typography } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddIcon from '@mui/icons-material/Add';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ModalWindow from '../ModalWindow';\nimport FormNewTask from '../FormNewTask';\nimport { useForm } from 'react-hook-form';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport ConformModal from '../ConformModal';\nimport { useAppDispatch } from '../../hooks/redux.hooks';\nimport { IColumn } from '../../types/board';\nimport { deleteColumn, updateTitleColumn } from '../../store/slices/columnReducer';\nimport Task from '../Task';\nimport { useTranslation } from 'react-i18next';\nimport { IFilters } from '../pages/SingleBoardPage';\n\ntype IFormInputChangeName = {\n  title: string;\n};\n\nconst Column = ({ column, filters }: { column: IColumn; filters: IFilters }) => {\n  const [isEdit, setIsEdit] = useState(false);\n  const [isOpenModalAddNewTask, setisOpenModalAddNewTask] = React.useState(false);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IFormInputChangeName>();\n  const { t } = useTranslation();\n\n  const [isOpenConformModal, setIsOpenConformModal] = React.useState(false);\n  const { boardId } = useParams();\n  const dispatch = useAppDispatch();\n\n  const handleDeleteColumn = async () => {\n    if (boardId) {\n      dispatch(deleteColumn({ boardId: boardId, columnId: column.id, order: column.order }));\n    }\n  };\n\n  const changeNameColumn = async (e: IFormInputChangeName) => {\n    if (boardId) {\n      dispatch(\n        updateTitleColumn({ boardId, columnId: column.id, order: column.order, title: e.title })\n      );\n    }\n    setIsEdit(false);\n  };\n\n  return (\n    <Draggable draggableId={column.id} index={column.order}>\n      {(provided) => (\n        <Stack\n          spacing={0}\n          sx={{\n            width: '400px',\n            minWidth: '400px',\n            maxWidth: '400px',\n            border: '1px solid Gray',\n            borderRadius: 2,\n            py: 1,\n            ml: 2,\n            mr: 2,\n            backgroundColor: 'rgba(213, 217, 233, .7)',\n            '@media only screen and (max-width: 450px)': {\n              width: '100%',\n              minWidth: '250px',\n              maxWidth: '400px',\n              ml: 0,\n              mr: 0,\n              p: 1,\n            },\n            maxHeight: 'calc(100vh - 230px)',\n          }}\n          component=\"li\"\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n        >\n          <Box\n            sx={{\n              width: '100%',\n              py: 0.8,\n              px: 1.7,\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n            {...provided.dragHandleProps}\n          >\n            {isEdit ? (\n              <form onSubmit={handleSubmit(changeNameColumn)}>\n                <Box\n                  sx={{\n                    width: '100%',\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItem: 'center',\n                  }}\n                >\n                  <TextField\n                    defaultValue={column.title}\n                    variant=\"standard\"\n                    autoFocus\n                    error={errors.title ? true : false}\n                    helperText={errors.title ? errors.title.message : ''}\n                    sx={{\n                      cursor: 'default',\n                      width: '70%',\n                      pl: 1,\n                      input: {\n                        color: 'gray',\n                        fontWeight: 700,\n                        fontSize: '1.3rem',\n                      },\n                    }}\n                    {...register('title', {\n                      required: { value: true, message: `${t('FORM.REQUIRE_MSG')}` },\n                    })}\n                  />\n                  <Box alignSelf=\"center\">\n                    <Tooltip title={t('BOARD.CHANGE_NAME')}>\n                      <IconButton\n                        aria-label=\"change name\"\n                        color=\"primary\"\n                        size=\"large\"\n                        sx={{\n                          p: 0.5,\n                        }}\n                        type=\"submit\"\n                      >\n                        <CheckCircleIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('CANCEL_BTN')}>\n                      <IconButton\n                        aria-label=\"cancel\"\n                        color=\"primary\"\n                        size=\"large\"\n                        sx={{\n                          p: 0.5,\n                        }}\n                        onClick={() => setIsEdit(false)}\n                      >\n                        <CancelIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </Box>\n                </Box>\n              </form>\n            ) : (\n              <Typography\n                align=\"left\"\n                noWrap={true}\n                sx={{\n                  color: 'gray',\n                  width: '70%',\n                  fontSize: '1.5rem',\n                  fontWeight: 'bold',\n                  '&:hover': {\n                    color: 'primary.contrastText',\n                    cursor: 'pointer',\n                  },\n                }}\n                onClick={() => setIsEdit(true)}\n              >\n                {column.title}\n              </Typography>\n            )}\n            <Box sx={{ display: 'flex' }}>\n              <Tooltip title={t('TASK.ADD_BTN')}>\n                <IconButton\n                  aria-label=\"add new task\"\n                  color=\"primary\"\n                  size=\"large\"\n                  sx={{\n                    p: 0,\n                    pr: 1,\n                  }}\n                  onClick={() => setisOpenModalAddNewTask(true)}\n                >\n                  <AddIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title={t('COLUMN.DELETE_BTN')}>\n                <IconButton\n                  aria-label=\"delete column\"\n                  color=\"primary\"\n                  size=\"large\"\n                  sx={{\n                    p: 0,\n                  }}\n                  onClick={() => setIsOpenConformModal(true)}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          </Box>\n          <Divider sx={{ mt: 1, mb: 1 }} />\n          <Droppable droppableId={column.id} type=\"QUOTE\">\n            {(dropProvided) => {\n              return (\n                <Stack\n                  spacing={0}\n                  component=\"ul\"\n                  sx={{\n                    mt: 0,\n                    pl: 1.8,\n                    pr: 1,\n                    paddingRight: '.8rem',\n                    overflowY: 'auto',\n                    overflowX: 'hidden',\n                    '&::-webkit-scrollbar': {\n                      width: '.7rem',\n                    },\n                    '&::-webkit-scrollbar-thumb ': {\n                      backgroundColor: '#c8c8c8',\n                      borderRadius: 2,\n                    },\n                    '&::-webkit-scrollbar-thumb:hover ': {\n                      backgroundColor: '#a8a8a8',\n                    },\n                    minHeight: '1vh',\n                    '@media only screen and (max-width: 450px)': {\n                      pr: 0,\n                      '&::-webkit-scrollbar': {\n                        width: '0',\n                        backgroundColor: '#f1f1f1',\n                      },\n                    },\n                  }}\n                  {...dropProvided.droppableProps}\n                  ref={dropProvided.innerRef}\n                >\n                  {column.tasks &&\n                    [...column.tasks]\n                      .sort((a, b) => a.order - b.order)\n                      .filter(\n                        (task) =>\n                          (filters.searchText === '' ||\n                            task.title.includes(filters.searchText) ||\n                            task.description.includes(filters.searchText)) &&\n                          (filters.usersId.length === 0 ||\n                            filters.usersId.includes(task.userId) ||\n                            (filters.usersId.includes('deleted') && task.userId == null))\n                      )\n                      .map((task, index) => <Task key={task.id} task={task} index={index} />)}\n                  {dropProvided.placeholder}\n                </Stack>\n              );\n            }}\n          </Droppable>\n          <ModalWindow open={isOpenModalAddNewTask} onClose={() => setisOpenModalAddNewTask(false)}>\n            <FormNewTask columnId={column.id} onClose={() => setisOpenModalAddNewTask(false)} />\n          </ModalWindow>\n          <ConformModal\n            isOpen={isOpenConformModal}\n            close={() => setIsOpenConformModal(false)}\n            func={handleDeleteColumn}\n          />\n        </Stack>\n      )}\n    </Draggable>\n  );\n};\n\nexport default Column;\n","import Column from './Column';\nexport default Column;\n","import Toolbar from './Toolbar';\nexport default Toolbar;\n","import {\n  alpha,\n  Checkbox,\n  FormControl,\n  Grid,\n  InputBase,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n  styled,\n  Typography,\n} from '@mui/material';\nimport React from 'react';\nimport DashboardRoundedIcon from '@mui/icons-material/DashboardRounded';\nimport { useAppSelector } from '../../hooks/redux.hooks';\nimport { IFilters } from '../pages/SingleBoardPage';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { useTranslation } from 'react-i18next';\n\ntype IProps = {\n  filters: IFilters;\n  setFilters: (filters: IFilters) => void;\n  usersIdCreatedTasks: string[];\n};\n\nconst Toolbar = ({ filters, setFilters, usersIdCreatedTasks }: IProps) => {\n  const { title } = useAppSelector((state) => state.boards.singleBoard);\n  const { usersAll } = useAppSelector((state) => state.boards);\n  const { t } = useTranslation();\n\n  const Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n  }));\n\n  const SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: '#6585F3',\n  }));\n\n  const StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'rgb(34 46 168)',\n    fontWeight: 700,\n    '& .MuiInputBase-input': {\n      padding: theme.spacing(1, 1, 1, 0),\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      transition: theme.transitions.create('width'),\n    },\n  }));\n\n  const WhiteBorderTextField = styled(OutlinedInput)(({ theme }) => ({\n    textAlign: 'left',\n    '& .MuiSelect-select': {\n      padding: theme.spacing(1.2, 1, 1.2, 1),\n      transition: theme.transitions.create('width'),\n    },\n    color: 'rgb(34 46 168)',\n    fontWeight: 700,\n    '& fieldset': {\n      borderColor: '#3f51b5',\n      borderWidth: '2px',\n      backgroundColor: 'rgba(213, 217, 233, .8)',\n      zIndex: -1,\n    },\n    '&:hover fieldset': {\n      borderWidth: '1px',\n    },\n  }));\n\n  const usersCreatedTasks = usersIdCreatedTasks.map((id) => {\n    const user = usersAll.find((user) => user.id === id);\n    const resultUser = {\n      ...user,\n      name: user?.name || `${t('FILTER.UNKNOWN_USER')}`,\n      id: user?.id || 'deleted',\n    };\n\n    return resultUser;\n  });\n\n  const [personName, setPersonName] = React.useState<string[]>([]);\n\n  const handleChange = (event: SelectChangeEvent<typeof personName>) => {\n    const {\n      target: { value },\n    } = event;\n    setPersonName(\n      // On autofill we get a stringified value.\n      typeof value === 'string' ? value.split(',') : value\n    );\n    const usersIdChecked = usersCreatedTasks\n      .filter((user) => event.target.value.includes(user?.name || ''))\n      .map((user) => user?.id || '');\n    setFilters({ ...filters, usersId: usersIdChecked });\n  };\n\n  return (\n    <Grid\n      container\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      columnSpacing={{ lg: 1 }}\n      px={3}\n      py={1}\n      sx={{\n        position: 'fixed',\n        top: '68.5px',\n        left: '0',\n        '@media only screen and (max-width: 900px)': {\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'column',\n        },\n        '@media only screen and (max-width: 600px)': {\n          position: 'unset',\n        },\n      }}\n    >\n      <Grid\n        item\n        container\n        direction=\"row\"\n        lg={6}\n        md={4}\n        sm={12}\n        sx={{\n          width: '100%',\n          '@media only screen and (max-width: 900px)': {\n            alignItems: 'center',\n            justifyContent: 'center',\n          },\n        }}\n      >\n        <DashboardRoundedIcon sx={{ color: '#303F9F' }} />\n        <Typography align=\"left\" variant=\"h5\" sx={{ fontWeight: 'bold', color: '#303F9F' }}>\n          {title.slice(2)}\n        </Typography>\n      </Grid>\n      <Grid item lg={3} md={3} sm={6} xs={10} sx={{ width: '100%' }}>\n        <FormControl\n          sx={{\n            mx: 1,\n            py: 1,\n            display: 'flex',\n            justifyContent: 'center',\n          }}\n        >\n          <InputLabel id=\"demo-multiple-checkbox-label\" sx={{ p: 0, m: 0, color: '#686970' }}>\n            {usersCreatedTasks.length ? t('FILTER.SELECT') : t('FILTER.NO_TASKS')}\n          </InputLabel>\n          <Select\n            labelId=\"demo-multiple-checkbox-label\"\n            id=\"demo-multiple-checkbox\"\n            multiple\n            value={personName}\n            onChange={handleChange}\n            input={<WhiteBorderTextField label={t('FILTER.SELECT')} />}\n            renderValue={(selected) => selected.join(', ')}\n            disabled={usersCreatedTasks.length === 0}\n          >\n            {usersCreatedTasks?.map((user, idx) => (\n              <MenuItem\n                key={`${user?.id}/${idx}`}\n                value={user?.name}\n                sx={{\n                  p: 0,\n                  m: 0,\n                }}\n              >\n                <Checkbox checked={personName.indexOf(user?.name || '') > -1} />\n                <ListItemText primary={user?.name} />\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item lg={3} md={3} sm={6} xs={10} sx={{ width: '100%' }}>\n        <Search\n          sx={{\n            border: '2px solid #3f51b5',\n            mx: 1,\n            backgroundColor: 'rgba(213, 217, 233, .7)',\n            '&:hover': {\n              backgroundColor: 'rgba(213, 217, 233, .9)',\n            },\n          }}\n        >\n          <SearchIconWrapper>\n            <SearchIcon />\n          </SearchIconWrapper>\n          <StyledInputBase\n            placeholder={t('FILTER.SEARCH')}\n            value={filters.searchText}\n            autoFocus\n            inputProps={{ 'aria-label': 'search' }}\n            onChange={(e) => setFilters({ ...filters, searchText: e.target.value })}\n          />\n        </Search>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Toolbar;\n","import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Container, Stack, useMediaQuery } from '@mui/material';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux.hooks';\nimport { clearSingleBoard } from '../../store/slices/boardSlice';\nimport { updateColumn, updateDrag } from '../../store/slices/columnReducer';\nimport { logOut } from '../../store/slices/authReduser';\nimport { updateDragTask, updDragTask, moveTaskOnServer } from '../../store/slices/taskResucer';\nimport NewColumn from '../NewColumn';\nimport ModalWindow from '../ModalWindow';\nimport Column from '../Column';\nimport Toolbar from '../Toolbar';\nimport { ITask } from '../../types/board';\nimport { IColumnsResp } from '../../utils/types/board';\n\nexport type IFilters = {\n  searchText: string;\n  usersId: string[];\n};\n\nconst SingleBoardPage = () => {\n  const [isOpenModalAddNewColumn, setIsOpenModalAddNewColumn] = useState(false);\n  const {\n    rejectMsg,\n    singleBoard: { columns, title, id: boardId },\n  } = useAppSelector((state) => state.boards);\n  const [filters, setFilters] = useState<IFilters>({ searchText: '', usersId: [] });\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const matches = useMediaQuery('(max-width:600px)');\n  const { t } = useTranslation();\n  const usersIdCreatedTasks: string[] = [];\n\n  columns.forEach((column) => {\n    column?.tasks?.forEach((task) => {\n      if (!usersIdCreatedTasks.includes(task.userId)) {\n        usersIdCreatedTasks.push(task.userId);\n      }\n    });\n  });\n\n  useEffect(() => {\n    return () => {\n      dispatch(clearSingleBoard());\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (rejectMsg) {\n      const [code] = rejectMsg.split('/');\n      if (code) {\n        if (+code === 401) {\n          dispatch(logOut());\n          navigate('/signin', { replace: true });\n        } else {\n          navigate('/not-found-board', { replace: true });\n        }\n      }\n    }\n  }, [rejectMsg, dispatch, navigate]);\n\n  const onDragEndTask = (result: DropResult) => {\n    const { destination, source, draggableId } = result;\n\n    const idxColFrom = columns.findIndex((el) => el.id === source.droppableId) as number;\n    const idxColDestination = columns.findIndex((el) => el.id === destination?.droppableId);\n    const draggableTask = columns[idxColFrom].tasks?.find((el) => el.id === draggableId) as ITask;\n    const idColumnDestination = columns[idxColDestination].id;\n\n    const copyTasksFrom = columns[idxColFrom]?.tasks?.slice(0);\n    let copyTasksDestination = columns[idxColDestination]?.tasks?.slice(0);\n\n    const moveInColumnUp =\n      source.droppableId === destination?.droppableId && source.index < destination?.index;\n\n    const tasksFrom = copyTasksFrom\n      ?.sort((a, b) => a.order - b.order)\n      .slice(source.index + 1) as ITask[];\n\n    const tasksTo = copyTasksDestination\n      ?.sort((a, b) => a.order - b.order)\n      .slice((destination?.index || 0) + (moveInColumnUp ? 1 : 0)) as ITask[];\n\n    const dataMoveTask = {\n      boardId: boardId || '',\n      columnIdFrom: source.droppableId,\n      idColumnDestination,\n      columnIdTo: destination?.droppableId || '',\n      indexTaskTo: destination?.index || 0,\n      task: draggableTask,\n      tasksFrom: tasksFrom,\n      tasksTo: tasksTo || [],\n    };\n\n    const updDragTask: updDragTask = {\n      draggableTask,\n      tasks: copyTasksFrom || [],\n      oldOrder: draggableTask.order,\n      newOrder: destination?.index || 0,\n      columnId: columns[idxColFrom].id,\n    };\n\n    if (idxColFrom === idxColDestination) {\n      dispatch(updateDragTask(updDragTask));\n    } else if (idxColFrom !== idxColDestination) {\n      copyTasksDestination = copyTasksDestination ? copyTasksDestination : [];\n\n      const updDestinationTask: updDragTask = {\n        draggableTask,\n        tasks: copyTasksDestination,\n        oldOrder: copyTasksDestination?.length + 1 || 0,\n        newOrder: destination?.index || 0,\n        columnId: columns[idxColDestination].id,\n      };\n      const updOldColumn: updDragTask = {\n        draggableTask,\n        tasks: copyTasksFrom || [],\n        oldOrder: draggableTask.order,\n        newOrder: 100,\n        columnId: columns[idxColFrom].id,\n      };\n      dispatch(updateDragTask(updOldColumn));\n      dispatch(updateDragTask(updDestinationTask));\n    }\n    dispatch(moveTaskOnServer(dataMoveTask));\n  };\n\n  const onDragEndColumn = async (result: DropResult) => {\n    const { destination, draggableId } = result;\n\n    if (boardId && destination) {\n      const draggableColumn = columns.find((column) => column.id === draggableId) as IColumnsResp;\n      const oldOrder = draggableColumn.order;\n      const newOrder = destination.index;\n      const numChangedColumns = oldOrder - newOrder;\n\n      dispatch(updateDrag({ columns, draggableColumn, newOrder, oldOrder }));\n\n      await dispatch(\n        updateColumn({\n          boardId: boardId,\n          columnId: draggableColumn.id,\n          title: draggableColumn.title,\n          order: 1000,\n        })\n      );\n      if (numChangedColumns < 0) {\n        for (let i = oldOrder + 1; i <= newOrder; i++) {\n          const column = columns.find((column) => column.order === i) as IColumnsResp;\n          if (column) {\n            await dispatch(\n              updateColumn({\n                boardId: boardId,\n                columnId: column.id,\n                title: column.title,\n                order: column.order - 1,\n              })\n            );\n          }\n        }\n      } else if (numChangedColumns > 0) {\n        for (let i = oldOrder - 1; i >= newOrder; i--) {\n          const column = columns.find((column) => column.order === i) as IColumnsResp;\n          if (column) {\n            await dispatch(\n              updateColumn({\n                boardId: boardId,\n                columnId: column.id,\n                title: column.title,\n                order: column.order + 1,\n              })\n            );\n          }\n        }\n      }\n\n      await dispatch(\n        updateColumn({\n          boardId: boardId,\n          columnId: draggableColumn.id,\n          title: draggableColumn.title,\n          order: newOrder,\n        })\n      );\n    }\n  };\n\n  const getImageNumber = (title: string) => {\n    const num = title.slice(0, 2);\n    return num[0] === '0' ? num[1] : num;\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    const { destination, source } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    if (destination.droppableId === 'board') {\n      onDragEndColumn(result);\n    } else {\n      onDragEndTask(result);\n    }\n  };\n\n  return (\n    <Container\n      maxWidth={false}\n      sx={{\n        height: 'calc(100vh - 127px)',\n        p: 0,\n        pt: 'calc(71px)',\n        background: `url('/project-management-app/pictures/background${getImageNumber(\n          title\n        )}.webp')`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        overflowX: 'auto',\n        overflowY: 'auto',\n        '@media only screen and (max-width: 900px)': {\n          pt: 'calc(148px)',\n          height: 'calc(100vh - 183px)',\n        },\n        '@media only screen and (max-width: 600px)': {\n          pt: 0,\n        },\n        '@media only screen and (max-width: 450px)': {\n          '&::-webkit-scrollbar': {\n            width: '0',\n            backgroundColor: '#f1f1f1',\n          },\n        },\n        '&::-webkit-scrollbar': {\n          height: '.7rem',\n        },\n        '&::-webkit-scrollbar-thumb ': {\n          backgroundColor: '#c8c8c8',\n          borderRadius: 2,\n        },\n        '&::-webkit-scrollbar-thumb:hover ': {\n          backgroundColor: '#a8a8a8',\n        },\n      }}\n    >\n      <Toolbar\n        filters={filters}\n        setFilters={setFilters}\n        usersIdCreatedTasks={usersIdCreatedTasks}\n      ></Toolbar>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"board\" direction={matches ? 'vertical' : 'horizontal'}>\n          {(provided) => {\n            return (\n              <Stack\n                direction={{ xs: 'column', sm: 'row' }}\n                spacing={0}\n                component=\"ul\"\n                justifyContent=\"flex-start\"\n                alignItems=\"flex-start\"\n                sx={{\n                  '@media only screen and (max-width: 600px)': {\n                    alignItems: 'center',\n                    gap: '10px',\n                  },\n                }}\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {[...columns]\n                  .sort((a, b) => a.order - b.order)\n                  .map((column: IColumnsResp) => (\n                    <Column key={column.id} column={column} filters={filters} />\n                  ))}\n                {provided.placeholder}\n                <Button\n                  variant=\"outlined\"\n                  size=\"large\"\n                  sx={{\n                    height: 50,\n                    width: '100%',\n                    maxWidth: '400px',\n                    minWidth: '170px',\n                    padding: 2,\n                    ml: 2,\n                    mr: 2,\n                    backgroundColor: 'rgba(213, 217, 233, .7)',\n                    '&:hover': { backgroundColor: 'rgb(213, 217, 233)' },\n                  }}\n                  onClick={() => setIsOpenModalAddNewColumn(true)}\n                >\n                  {t('COLUMN.NEW_COLUMN')}\n                </Button>\n              </Stack>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n      <ModalWindow open={isOpenModalAddNewColumn} onClose={() => setIsOpenModalAddNewColumn(false)}>\n        <NewColumn onClose={() => setIsOpenModalAddNewColumn(false)} />\n      </ModalWindow>\n    </Container>\n  );\n};\n\nexport default SingleBoardPage;\n"],"names":["onClose","useForm","register","handleSubmit","errors","formState","t","useTranslation","columns","useAppSelector","state","boards","singleBoard","dispatch","useAppDispatch","boardId","useParams","onSubmit","title","createColumn","order","length","Box","sx","width","maxWidth","DialogTitle","DialogContent","TextField","label","fullWidth","mt","variant","error","helperText","message","required","value","DialogActions","Button","onClick","color","type","columnId","data","currentColumn","find","item","id","maxOrder","tasks","userId","localStorageGetUser","newTask","description","createTask","my","multiline","rows","task","React","files","downloadFiles","setDownloadFiles","isOpenConformModal","setIsOpenConformModal","usersAll","currentUser","user","name","onDelete","indexColumns","findIndex","taskId","deleteTask","updateTask","display","justifyContent","flexDirection","Typography","m","px","style","pb","autoFocus","defaultValue","margin","Boolean","TableContainer","component","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","map","border","scope","filename","fileSize","Tooltip","IconButton","p","newDownloadFiles","filter","handleDeleteFile","Delete","Divider","hidden","onChange","e","target","newFile","file","ConformModal","isOpen","close","func","index","isOpenModalTaskFull","setIsOpenModalTaskFull","TitleTask","styled","theme","typography","h6","textAlign","paddingLeft","spacing","palette","text","primary","height","overflow","lineHeight","borderRadius","shape","alignItems","paddingRight","marginBottom","marginTop","boxShadow","opacity","stringToColor","string","i","hash","charCodeAt","toString","slice","stringAvatar","curName","bgcolor","children","split","draggableId","provided","ListItem","ref","innerRef","draggableProps","dragHandleProps","gap","flexGrow","Edit","Avatar","ModalWindow","open","column","filters","useState","isEdit","setIsEdit","isOpenModalAddNewTask","setisOpenModalAddNewTask","handleDeleteColumn","deleteColumn","changeNameColumn","updateTitleColumn","Stack","minWidth","py","ml","mr","backgroundColor","maxHeight","alignItem","cursor","pl","input","fontWeight","fontSize","alignSelf","CheckCircle","Cancel","noWrap","pr","Add","mb","droppableId","dropProvided","overflowY","overflowX","minHeight","droppableProps","sort","a","b","searchText","includes","usersId","placeholder","setFilters","usersIdCreatedTasks","Search","position","alpha","common","white","SearchIconWrapper","padding","pointerEvents","StyledInputBase","InputBase","transition","transitions","create","WhiteBorderTextField","OutlinedInput","borderColor","borderWidth","zIndex","usersCreatedTasks","personName","setPersonName","Grid","container","columnSpacing","lg","top","left","direction","md","sm","DashboardRounded","xs","FormControl","mx","InputLabel","Select","labelId","multiple","event","usersIdChecked","renderValue","selected","join","disabled","idx","MenuItem","Checkbox","checked","indexOf","ListItemText","inputProps","isOpenModalAddNewColumn","setIsOpenModalAddNewColumn","rejectMsg","navigate","useNavigate","matches","useMediaQuery","forEach","push","useEffect","clearSingleBoard","code","logOut","replace","onDragEndColumn","result","destination","draggableColumn","oldOrder","newOrder","numChangedColumns","updateDrag","updateColumn","Container","pt","background","num","getImageNumber","backgroundRepeat","backgroundSize","backgroundPosition","onDragEnd","source","idxColFrom","el","idxColDestination","draggableTask","idColumnDestination","copyTasksFrom","copyTasksDestination","moveInColumnUp","tasksFrom","tasksTo","dataMoveTask","columnIdFrom","columnIdTo","indexTaskTo","updDragTask","updateDragTask","updDestinationTask","updOldColumn","moveTaskOnServer","onDragEndTask"],"sourceRoot":""}